<!DOCTYPE html>
<html lang="pl">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Dynamic Foldable Menu</title>
<style>
body {
  margin: 0;
  font-family: monospace;
  font-size: 20px;
  background: #000;
}
nav {
  background-color: #000;
  padding: 0px;
  width: 250px;
  margin: 15px auto;
}
.menu {
  list-style: none;
  padding: 0;
  margin: 0;
}

.menu li {
  position: relative;
  text-align: center; /* Wyśrodkowanie tekstu */
}
  
.menu a {
  color: white;
  text-decoration: none;
  max-width: 250px;
  display: flex; 
  padding: 2.5px 10px; 
  border-radius: 10px;
  border: 0px solid white;
  transition: background 1s, transform 2s, border 0.2s, padding 0.6s linear;
}
  
.menu a:hover {
  background: #000;
  padding-left: 15px;
  border: 2px solid white;
  transform: translateX(10px);
  ransition: background 1s, transform 2s, border 0.2s, padding 0.6s linear;
}
.menu li.active > a {
  background: #242424;
  padding-left: 15px;
  border: 5px double white;
  transform: translateX(10px), transform 5s;
}
.submenu {
  list-style: none;
  display: run-in;
  font-size: 18px;
  padding: 0;
  max-height: 0;
  overflow: hidden;
  transform: translateX(15px);
  transition: max-height 0.6s ease-out;
}
.menu li.active .submenu {
  max-height: 500px;
  transition: background 1s, transform 2s, border 0.2s, padding 0.6s, max-height 3s;
}
.submenu li a {
  padding-left: 15px;
  max-width: 200px;
}
</style>
</head>
<body>

<nav>
  <ul class="menu" id="menuContainer">
    <!-- Menu dynamicznie załadowane z GitHub -->
  </ul>
</nav>

<script>
function toggleMenu(event) {
  event.preventDefault();
  const li = event.target.parentElement;
  li.classList.toggle('active');
}

fetch('https://raw.githubusercontent.com/NajlepszaOpcja/Dropdownmenu/refs/heads/main/Menu.txt')
  .then(response => response.text())
  .then(data => {
    const lines = data.trim().split('\n');
    const menuContainer = document.getElementById('menuContainer');

    let buffer = "";
    const blocks = [];

    lines.forEach(line => {
      if (line.startsWith('MAIN') || line.startsWith('CATEGORY')) {
        if (buffer.trim() !== "") {
          blocks.push(buffer.trim().replace(/\n/g, ' '));
        }
        buffer = line;
      } else {
        buffer += ' ' + line;
      }
    });
    if (buffer.trim() !== "") {
      blocks.push(buffer.trim().replace(/\n/g, ' '));
    }

    blocks.forEach(block => {
      const parts = block.split('|').map(p => p.trim());
      const type = parts[0];

      if (type === 'MAIN') {
        const li = document.createElement('li');
        const a = document.createElement('a');
        a.href = parts[2];
        a.textContent = parts[1];
        li.appendChild(a);
        menuContainer.appendChild(li);
      } else if (type === 'CATEGORY') {
        const li = document.createElement('li');
        const a = document.createElement('a');
        a.href = parts[2];
        a.textContent = parts[1];
        a.addEventListener('click', toggleMenu);

        const submenu = document.createElement('ul');
        submenu.classList.add('submenu');

        const subItemsString = parts.slice(3).join('|');
        const subItems = subItemsString.split(';').map(item => item.trim()).filter(item => item.length > 0);

        subItems.forEach(sub => {
          const [subName, subUrl] = sub.split(',').map(s => s.trim());
          if (subName && subUrl) {
            const subLi = document.createElement('li');
            const subA = document.createElement('a');
            subA.href = subUrl;
            subA.textContent = subName;
            subLi.appendChild(subA);
            submenu.appendChild(subLi);
          }
        });

        li.appendChild(a);
        li.appendChild(submenu);
        menuContainer.appendChild(li);
      }
    });
  });
</script>

</body>
</html>
